<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GPIO_Toggle.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GPIO_Toggle.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Mar 13 11:11:34 2023
<BR><P>
<H3>Maximum Stack Usage =        372 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Usart_Recv_thread_entry &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from apm32e10x_int.o(i.BusFault_Handler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from can.o(i.CAN2_RX1_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[52]">Can2_Recv_thread_entry</a> from my_can.o(i.Can2_Recv_thread_entry) referenced from my_can.o(i.build_can_recv_thread)
 <LI><a href="#[54]">Can2_Send_thread_entry</a> from my_can.o(i.Can2_Send_thread_entry) referenced from my_can.o(i.build_can_send_thread)
 <LI><a href="#[51]">Can_Recv_thread_entry</a> from my_can.o(i.Can_Recv_thread_entry) referenced from my_can.o(i.build_can_recv_thread)
 <LI><a href="#[53]">Can_Send_thread_entry</a> from my_can.o(i.Can_Send_thread_entry) referenced from my_can.o(i.build_can_send_thread)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from usart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from apm32e10x_int.o(i.DebugMon_Handler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[13]">EINT0_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[35]">EINT15_10_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[14]">EINT1_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[15]">EINT2_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[16]">EINT3_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[17]">EINT4_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[24]">EINT9_5_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[3d]">EMMC_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from apm32e10x_int.o(i.MemManage_Handler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from apm32e10x_int.o(i.NMI_Handler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[12]">RCM_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from apm32e10x_int.o(i.SVC_Handler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from board_1.o(i.SysTick_Handler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_apm32e10x.o(i.SystemInit) referenced from startup_apm32e10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[25]">TMR1_BRK_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[28]">TMR1_CC_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[27]">TMR1_TRG_COM_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[26]">TMR1_UP_IRQHandler</a> from time.o(i.TMR1_UP_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[29]">TMR2_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[2a]">TMR3_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[2b]">TMR4_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[3f]">TMR5_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[43]">TMR6_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[44]">TMR7_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[38]">TMR8_BRK_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[3b]">TMR8_CC_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[3a]">TMR8_TRG_COM_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[39]">TMR8_UP_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[20]">USBD1_HP_CAN1_TX_IRQHandler</a> from can.o(i.USBD1_HP_CAN1_TX_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[21]">USBD1_LP_CAN1_RX0_IRQHandler</a> from can.o(i.USBD1_LP_CAN1_RX0_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[49]">USBD2_HP_CAN2_TX_IRQHandler</a> from can.o(i.USBD2_HP_CAN2_TX_IRQHandler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[4a]">USBD2_LP_CAN2_RX0_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[37]">USBDWakeUp_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from apm32e10x_int.o(i.UsageFault_Handler) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[55]">Usart_Recv_thread_entry</a> from my_usart.o(i.Usart_Recv_thread_entry) referenced from my_usart.o(i.build_usart_recv_thread)
 <LI><a href="#[d]">WWDT_IRQHandler</a> from startup_apm32e10x_hd.o(.text) referenced from startup_apm32e10x_hd.o(RESET)
 <LI><a href="#[5e]">__main</a> from __main.o(!!!main) referenced from startup_apm32e10x_hd.o(.text)
 <LI><a href="#[57]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[56]">msg_thread_entry</a> from main.o(i.msg_thread_entry) referenced from main.o(i.main)
 <LI><a href="#[4f]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[58]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[50]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[5c]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[5a]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[5d]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[59]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[5b]">uart_init</a> from board_1.o(i.uart_init) referenced from board_1.o(.rti_fn.1)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[61]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11e]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[11f]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[120]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[65]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[121]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[122]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[123]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[124]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[125]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[126]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[127]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[128]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[129]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[130]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[131]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[132]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[133]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[134]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[135]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[13a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[13c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[60]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[13d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[62]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[64]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[66]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[69]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[140]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EINT15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EMMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TMR5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TMR6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TMR7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TMR8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TMR8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TMR8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBD2_LP_CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBDWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32e10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_apm32e10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b6]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[b7]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[f8]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[f9]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[141]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[68]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[148]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[149]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[14a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32e10x_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, can.o(i.CAN2_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMessage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadIntFlag
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CAN_ClearIntFlag</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, apm32e10x_can.o(i.CAN_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD2_HP_CAN2_TX_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_HP_CAN1_TX_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>CAN_Config</STRONG> (Thumb, 294 bytes, Stack size 12 bytes, apm32e10x_can.o(i.CAN_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
</UL>

<P><STRONG><a name="[7f]"></a>CAN_ConfigFilter</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, apm32e10x_can.o(i.CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
</UL>

<P><STRONG><a name="[7d]"></a>CAN_ConfigStructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, apm32e10x_can.o(i.CAN_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
</UL>

<P><STRONG><a name="[a4]"></a>CAN_DisableInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32e10x_can.o(i.CAN_DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD2_HP_CAN2_TX_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>CAN_EnableInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32e10x_can.o(i.CAN_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_thread_entry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_send_msg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_send_msg
</UL>

<P><STRONG><a name="[72]"></a>CAN_ReadIntFlag</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, apm32e10x_can.o(i.CAN_ReadIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD2_HP_CAN2_TX_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_HP_CAN1_TX_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>CAN_Reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, apm32e10x_can.o(i.CAN_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphReset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_DisableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
</UL>

<P><STRONG><a name="[73]"></a>CAN_RxMessage</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, apm32e10x_can.o(i.CAN_RxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_RxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>CAN_TxMessage</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, apm32e10x_can.o(i.CAN_TxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD2_HP_CAN2_TX_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_HP_CAN1_TX_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_send_msg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_send_msg
</UL>

<P><STRONG><a name="[79]"></a>Can1_Init</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, can.o(i.Can1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Can1_Init &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInterrupt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Reset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigStructInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigFilter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[82]"></a>Can2_Init</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, can.o(i.Can2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Can2_Init &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInterrupt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Reset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigStructInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigFilter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, usart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ReadIntFlag
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigDataNumber
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearStatusFlag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA_ClearStatusFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_voice_play
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
</UL>

<P><STRONG><a name="[aa]"></a>DMA_Config</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_Config))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
</UL>

<P><STRONG><a name="[8e]"></a>DMA_ConfigDataNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_ConfigDataNumber))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_voice_play
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_dma_send
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
</UL>

<P><STRONG><a name="[a9]"></a>DMA_ConfigStructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
</UL>

<P><STRONG><a name="[8d]"></a>DMA_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_voice_play
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_dma_send
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
</UL>

<P><STRONG><a name="[8f]"></a>DMA_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_voice_play
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_dma_send
</UL>

<P><STRONG><a name="[a1]"></a>DMA_EnableInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
</UL>

<P><STRONG><a name="[9f]"></a>DMA_ReadDataNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_ReadDataNumber))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
</UL>

<P><STRONG><a name="[8c]"></a>DMA_ReadIntFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_ReadIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>DMA_Reset</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, apm32e10x_dma.o(i.DMA_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32e10x_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>GPIO_Config</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, apm32e10x_gpio.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[11b]"></a>GPIO_ConfigStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32e10x_gpio.o(i.GPIO_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[c2]"></a>GPIO_ReadInputBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32e10x_gpio.o(i.GPIO_ReadInputBit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_ReadOutputBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32e10x_gpio.o(i.GPIO_ReadOutputBit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c5]"></a>GPIO_ResetBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32e10x_gpio.o(i.GPIO_ResetBit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c4]"></a>GPIO_SetBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32e10x_gpio.o(i.GPIO_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_WriteBitValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32e10x_gpio.o(i.GPIO_WriteBitValue))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_voice_play
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rest
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_call
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_voice_play
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_rest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_call
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32e10x_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32e10x_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>NVIC_ConfigPriorityGroup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32e10x_misc.o(i.NVIC_ConfigPriorityGroup))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[80]"></a>NVIC_EnableIRQRequest</STRONG> (Thumb, 150 bytes, Stack size 28 bytes, apm32e10x_misc.o(i.NVIC_EnableIRQRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ConfigPriorityGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_voice_play
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_thread_entry
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
</UL>

<P><STRONG><a name="[78]"></a>RCM_DisableAPB1PeriphReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32e10x_rcm.o(i.RCM_DisableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Reset
</UL>

<P><STRONG><a name="[a6]"></a>RCM_EnableAHBPeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32e10x_rcm.o(i.RCM_EnableAHBPeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
</UL>

<P><STRONG><a name="[7b]"></a>RCM_EnableAPB1PeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32e10x_rcm.o(i.RCM_EnableAPB1PeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
</UL>

<P><STRONG><a name="[77]"></a>RCM_EnableAPB1PeriphReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32e10x_rcm.o(i.RCM_EnableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Reset
</UL>

<P><STRONG><a name="[7a]"></a>RCM_EnableAPB2PeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32e10x_rcm.o(i.RCM_EnableAPB2PeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[92]"></a>RCM_ReadHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, apm32e10x_rcm.o(i.RCM_ReadHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadSYSCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
</UL>

<P><STRONG><a name="[94]"></a>RCM_ReadPCLKFreq</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, apm32e10x_rcm.o(i.RCM_ReadPCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RCM_ReadPCLKFreq &rArr; RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[93]"></a>RCM_ReadSYSCLKFreq</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, apm32e10x_rcm.o(i.RCM_ReadSYSCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadHCLKFreq
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32e10x_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board_1.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 140 bytes, Stack size 36 bytes, system_apm32e10x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, system_apm32e10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SystemClockConfig &rArr; SystemClock120M
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TMR1_UP_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, time.o(i.TMR1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR1_UP_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_time
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ReadIntFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>TMR_ClearIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apm32e10x_tmr.o(i.TMR_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_UP_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>TMR_ConfigTimeBase</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, apm32e10x_tmr.o(i.TMR_ConfigTimeBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_ConfigTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
</UL>

<P><STRONG><a name="[118]"></a>TMR_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32e10x_tmr.o(i.TMR_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_time
</UL>

<P><STRONG><a name="[116]"></a>TMR_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32e10x_tmr.o(i.TMR_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_time
</UL>

<P><STRONG><a name="[11a]"></a>TMR_EnableInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32e10x_tmr.o(i.TMR_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
</UL>

<P><STRONG><a name="[98]"></a>TMR_ReadIntFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, apm32e10x_tmr.o(i.TMR_ReadIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_UP_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; start_time
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearStatusFlag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_time
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadIntFlag
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DisableInterrupt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ReadDataNumber
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableInterrupt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigDataNumber
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearStatusFlag
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>USART_ClearIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32e10x_usart.o(i.USART_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>USART_Config</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, apm32e10x_usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[9e]"></a>USART_DisableInterrupt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, apm32e10x_usart.o(i.USART_DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_voice_play
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>USART_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apm32e10x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[ab]"></a>USART_EnableDMA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32e10x_usart.o(i.USART_EnableDMA))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
</UL>

<P><STRONG><a name="[117]"></a>USART_EnableInterrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, apm32e10x_usart.o(i.USART_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_voice_play
</UL>

<P><STRONG><a name="[9b]"></a>USART_ReadIntFlag</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, apm32e10x_usart.o(i.USART_ReadIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ReadIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>USART_ReadStatusFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32e10x_usart.o(i.USART_ReadStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[df]"></a>USART_TxData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32e10x_usart.o(i.USART_TxData))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[20]"></a>USBD1_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, can.o(i.USBD1_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD1_HP_CAN1_TX_IRQHandler &rArr; CAN_TxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxMessage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadIntFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DisableInterrupt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USBD1_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, can.o(i.USBD1_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD1_LP_CAN1_RX0_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMessage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadIntFlag
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBD2_HP_CAN2_TX_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, can.o(i.USBD2_HP_CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD2_HP_CAN2_TX_IRQHandler &rArr; CAN_TxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxMessage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadIntFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DisableInterrupt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apm32e10x_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32e10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>Usart2_Dma_Init</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, usart.o(i.Usart2_Dma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Usart2_Dma_Init &rArr; USART_Config &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableInterrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigStructInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAHBPeriphClock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableDMA
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[f7]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[b8]"></a>build_can_recv_thread</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, my_can.o(i.build_can_recv_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = build_can_recv_thread &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[bc]"></a>build_can_send_thread</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, my_can.o(i.build_can_send_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = build_can_send_thread &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[bd]"></a>build_usart_recv_thread</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, my_usart.o(i.build_usart_recv_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = build_usart_recv_thread &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8a]"></a>can1_send_msg</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, my_can.o(i.can1_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can1_send_msg &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInterrupt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxMessage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can2_recv_msg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_thread_entry
</UL>

<P><STRONG><a name="[87]"></a>can2_send_msg</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, my_can.o(i.can2_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can2_send_msg &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInterrupt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TxMessage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Send_thread_entry
</UL>

<P><STRONG><a name="[be]"></a>gpio_init</STRONG> (Thumb, 408 bytes, Stack size 8 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[c1]"></a>init_data</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, my_misc.o(i.init_data))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c0]"></a>$Super$$main</STRONG> (Thumb, 1962 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = $Super$$main &rArr; build_usart_recv_thread &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_voice_play
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_usart_recv_thread
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_send_thread
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_recv_thread
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputBit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[57]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; build_usart_recv_thread &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[86]"></a>my_can2_recv_msg</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, my_can.o(i.my_can2_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = my_can2_recv_msg &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Recv_thread_entry
</UL>

<P><STRONG><a name="[88]"></a>my_can_recv_msg</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, my_can.o(i.my_can_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = my_can_recv_msg &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Recv_thread_entry
</UL>

<P><STRONG><a name="[ca]"></a>open_call</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, my_misc.o(i.open_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = open_call
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
</UL>

<P><STRONG><a name="[cb]"></a>open_rest</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, my_misc.o(i.open_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = open_rest
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
</UL>

<P><STRONG><a name="[cf]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[d9]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[c8]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[d0]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[d1]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[d3]"></a>rt_free</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[db]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_1.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[da]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_1.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[d5]"></a>rt_hw_board_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, board_1.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ConfigPriorityGroup
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time1_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysTick_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[dd]"></a>rt_hw_console_output</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, board_1.o(i.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_hw_console_output &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadStatusFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[6d]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[af]"></a>rt_hw_stack_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[e1]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[e2]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[89]"></a>rt_kprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_usart_recv_thread
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_send_thread
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_recv_thread
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can_recv_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can2_recv_msg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_thread_entry
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[ed]"></a>rt_malloc</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[8b]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_dma_send
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can_recv_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can2_recv_msg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_send_msg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_send_msg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_thread_entry
</UL>

<P><STRONG><a name="[a0]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can_recv_msg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[b9]"></a>rt_mutex_create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_recv_thread
</UL>

<P><STRONG><a name="[ee]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>

<P><STRONG><a name="[f2]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>

<P><STRONG><a name="[f4]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[ef]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[f5]"></a>rt_object_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[107]"></a>rt_object_is_systemobject</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[95]"></a>rt_os_tick_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_1.o(i.rt_os_tick_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_os_tick_callback &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d2]"></a>rt_schedule</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>

<P><STRONG><a name="[fa]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[fb]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[83]"></a>rt_sem_create</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_usart_recv_thread
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_send_thread
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Recv_thread_entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Recv_thread_entry
</UL>

<P><STRONG><a name="[85]"></a>rt_sem_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_thread_entry
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Recv_thread_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Send_thread_entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Recv_thread_entry
</UL>

<P><STRONG><a name="[fc]"></a>rt_sem_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[74]"></a>rt_sem_release</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_thread_entry
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_UP_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD1_LP_CAN1_RX0_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>rt_sem_take</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Send_thread_entry
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Recv_thread_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Send_thread_entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2_Recv_thread_entry
</UL>

<P><STRONG><a name="[ff]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[f0]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[dc]"></a>rt_system_heap_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[100]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[102]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[104]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[115]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[ba]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_usart_recv_thread
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_send_thread
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_recv_thread
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[c7]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_thread_entry
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[4f]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[109]"></a>rt_thread_idle_excute</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[10a]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[10b]"></a>rt_thread_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[e4]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[e0]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[105]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[bb]"></a>rt_thread_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_usart_recv_thread
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_send_thread
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_can_recv_thread
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[e8]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[50]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[10e]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[110]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[f6]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_os_tick_callback
</UL>

<P><STRONG><a name="[10f]"></a>rt_timer_check</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[fd]"></a>rt_timer_control</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[106]"></a>rt_timer_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[b0]"></a>rt_timer_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[fe]"></a>rt_timer_start</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[10d]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[ec]"></a>rt_vsnprintf</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[71]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>start_time</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_time.o(i.start_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_time
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>start_voice_play</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, my_misc.o(i.start_voice_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = start_voice_play &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigDataNumber
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
</UL>

<P><STRONG><a name="[cc]"></a>stop_call</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, my_misc.o(i.stop_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_call
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
</UL>

<P><STRONG><a name="[ce]"></a>stop_rest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, my_misc.o(i.stop_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_rest
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
</UL>

<P><STRONG><a name="[99]"></a>stop_time</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_time.o(i.stop_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_time
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_UP_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>stop_voice_play</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, my_misc.o(i.stop_voice_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_voice_play
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBitValue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearStatusFlag
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d8]"></a>time1_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, time.o(i.time1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = time1_init &rArr; NVIC_EnableIRQRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableInterrupt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ConfigTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[ad]"></a>usart2_dma_send</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, my_usart.o(i.usart2_dma_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usart2_dma_send &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigDataNumber
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Recv_thread_entry
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>msg_thread_entry</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, main.o(i.msg_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = msg_thread_entry &rArr; remote_msg_handle &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInterrupt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_msg_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c9]"></a>remote_msg_handle</STRONG> (Thumb, 2808 bytes, Stack size 8 bytes, main.o(i.remote_msg_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = remote_msg_handle &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rest
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_call
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_voice_play
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_rest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_call
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputBit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_thread_entry
</UL>

<P><STRONG><a name="[97]"></a>SystemClock120M</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, system_apm32e10x.o(i.SystemClock120M))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClock120M
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[96]"></a>SystemClockConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_apm32e10x.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClockConfig &rArr; SystemClock120M
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock120M
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[52]"></a>Can2_Recv_thread_entry</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, my_can.o(i.Can2_Recv_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Can2_Recv_thread_entry &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can2_recv_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_can.o(i.build_can_recv_thread)
</UL>
<P><STRONG><a name="[54]"></a>Can2_Send_thread_entry</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, my_can.o(i.Can2_Send_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Can2_Send_thread_entry &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_send_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_can.o(i.build_can_send_thread)
</UL>
<P><STRONG><a name="[51]"></a>Can_Recv_thread_entry</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, my_can.o(i.Can_Recv_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Can_Recv_thread_entry &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_can_recv_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_can.o(i.build_can_recv_thread)
</UL>
<P><STRONG><a name="[53]"></a>Can_Send_thread_entry</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, my_can.o(i.Can_Send_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Can_Send_thread_entry &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_send_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_can.o(i.build_can_send_thread)
</UL>
<P><STRONG><a name="[55]"></a>Usart_Recv_thread_entry</STRONG> (Thumb, 1092 bytes, Stack size 152 bytes, my_usart.o(i.Usart_Recv_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = Usart_Recv_thread_entry &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ReadDataNumber
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableInterrupt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigDataNumber
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearStatusFlag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_dma_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_usart.o(i.build_usart_recv_thread)
</UL>
<P><STRONG><a name="[5c]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[5a]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[5d]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[59]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[58]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[e3]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[e5]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>

<P><STRONG><a name="[e7]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[ea]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>

<P><STRONG><a name="[eb]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[e9]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[e6]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[114]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[113]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[d4]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[f1]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[f3]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[101]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[ae]"></a>_rt_thread_init</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[b5]"></a>_thread_cleanup_execute</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, thread.o(i._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[108]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[10c]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[b1]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[b3]"></a>_rt_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[b2]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[111]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[112]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[b4]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[d7]"></a>_SysTick_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, board_1.o(i._SysTick_Config))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[5b]"></a>uart_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, board_1.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Config &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigStructInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_1.o(.rti_fn.1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
